def releaseTag

pipeline {
  agent {
      label 'maven'
  }
  stages {
    stage('Prepare') {
      steps {
        git url: 'https://github.com/naikoob/spring-boot-rest-example.git'
        sh "git config --local user.email 'bookian@gmail.com'"
        sh "git config --local user.name 'naikoob'"

        script {
          releaseTag = readMavenPom().getVersion().replace("-SNAPSHOT", "")
        }
      }
    }
    stage('Release Code') {
      environment {
        SCM_GIT_URL = sh(returnStdout: true, script: 'git config remote.origin.url').trim()
      }
      steps {
        script {
          openshift.withCluster() {
            withCredentials([usernamePassword(credentialsId: "${openshift.project()}-github-credentials", usernameVariable: "GITHUB_USERNAME", passwordVariable: "GITHUB_PASSWORD")]) {
              sh "mvn --batch-mode release:clean release:prepare release:perform -s .settings.xml"
            }
          }
        }
      }
    }
    stage('Release Image') {
      steps {
        script {
          openshift.withCluster() {
            echo "Releasing catalog image version ${releaseTag}"
            openshift.tag("${openshift.project()}/spring-boot-rest-example:latest", "${openshift.project()}/spring-boot-rest-example:${releaseTag}")
          }
        }
      }
    }
    stage('Tear-down SIT') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.SIT_PROJECT) {
              openshift.raw('delete all,cm,pvc --all')
            }
          }
        }
      }
    }
    stage('Deploy SIT') {
      steps {
        script {
          openshift.withCluster() {
            def imageNamespace = openshift.project()
            openshift.withProject(env.SIT_PROJECT) {
              def template = 'https://raw.githubusercontent.com/naikoob/cd-infra/master/sit/hotel-template-sit.yaml'
              openshift.apply(
                openshift.process("-f", template, "-p", "IMAGE_VERSION=${releaseTag}", "-p", "IMAGE_NAMESPACE=${imageNamespace}")
              )
            }
          }
        }
      }
    }
  }
}