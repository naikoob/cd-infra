def namespace, releaseTag, prodCluster, prodToken, activeSvc, canarySvc

pipeline {
  agent {
      label 'maven'
  }
  stages {
    stage('Choose Release Version') {
      steps {
        script {
          openshift.withCluster() {
            namespace = openshift.project()
            def tags = openshift.selector("istag").objects().collect { it.metadata.name }.findAll { it.startsWith 'spring-boot-rest-example:' }.collect { it.replaceAll(/spring-boot-rest-example:(.*)/, "\$1") }.sort()
            timeout(5) {
              releaseTag = input(
                ok: "Deploy",
                message: "Enter release version to promote to PROD",
                parameters: [
                  choice(choices: tags.join('\n'), description: '', name: 'Release Version')
                ]
              )
            }
          }
        }
      }
    }
    stage('Deploy Canary 10%') {
      steps {
        script {
          openshift.withCluster() {
            openshift.withProject(env.PROD_PROJECT) {
              activeSvc = openshift.selector("route", "spring-boot-rest-example").object().spec.to.name
              def suffix = (activeSvc ==~ /spring-boot-rest-example-(\d+)/) ? (activeSvc.replaceAll(/spring-boot-rest-example-(\d+)/, '$1') as int) + 1 : "1"
              canarySvc = "spring-boot-rest-example-${suffix}"

              def template = 'https://raw.githubusercontent.com/naikoob/cd-infra/master/prod/hotel-app-deployment-template.yaml'
              openshift.apply(
                openshift.process("-f", template, "-p", "IMAGE_VERSION=${releaseTag}", "-p", "APP_NAME=${canarySvc}", "-p", "IMAGE_NAMESPACE=cicd", "-l", "deployment=${canarySvc}")
              )
              openshift.set("route-backends", "spring-boot-rest-example", "${activeSvc}=90%", "${canarySvc}=10%")
            }
          }
        }
      }
    }
  }
  post {
    aborted {
      script {
        openshift.withCluster() {
          openshift.withProject(env.PROD_PROJECT) {
            echo "Rolling back to current release ${activeSvc} and deleting the canary"
            openshift.set("route-backends", "spring-boot-rest-example", "${activeSvc}=100%")
            openshift.selector("dc", "${canarySvc}").delete()
            openshift.selector("svc", "${canarySvc}").delete()
          }
        }
      }
    }
    failure {
      script {
        openshift.withCluster() {
          openshift.withProject(env.PROD_PROJECT) {
            echo "Rolling back to current release ${activeSvc} and deleting the canary"
            openshift.set("route-backends", "spring-boot-rest-example", "${activeSvc}=100%")
            openshift.selector("dc", "${canarySvc}").delete()
            openshift.selector("svc", "${canarySvc}").delete()
          }
        }
      }
    }
  }
}
